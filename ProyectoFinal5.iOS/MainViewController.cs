// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreAnimation;
using Foundation;
using UIKit;

namespace TransportaAppAdmin_iOS
{
	public partial class MainViewController : UIViewController
	{
		public MainViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();


            var img = UIImage.FromBundle("camion");

            var camion = new CALayer();
            camion.Contents = img.CGImage;
            camion.Bounds = new CoreGraphics.CGRect(x: 0, y: 0, width: 92, height: 92);
            camion.Position = new CoreGraphics.CGPoint(x: View.Center.X, y: View.Center.Y - 20);
            ContenidoVista.Layer.Mask = camion;
            ContenidoVista.Layer.MasksToBounds = true;

            /*
                var bird = new CALayer();
                smileMask.contents = UIImage(named: "smiley face")?.cgImage
                smileMask.bounds = CGRect(x: 0, y: 0, width: 92, height: 92)
                smileMask.position = CGPoint(x: view.center.x, y: view.center.y-20)
                contentView.layer.mask = smileMask
                contentView.layer.masksToBounds = true
            */

            // MARK: - Smile Animation
            /*
             1. duration
             2. timing curve
             3. keyframes
             4. keyframe order
             5. apply animation
            */

            /*

            var animation = CAKeyframeAnimation(keyPath: "bounds")
            animation.duration = 1
            animation.timingFunctions = [
            CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut),
            CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        ]
        
            */

            var animation = CAKeyFrameAnimation.FromKeyPath("bounds");
            animation.Duration = 1;
            animation.TimingFunctions = new CAMediaTimingFunction[] {
                CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut),
                CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut)
            };

            var keyframe1 = NSValue.FromCGRect(new CoreGraphics.CGRect(x: 0, y: 0, width: 80, height: 80));
            var keyframe2 = NSValue.FromCGRect(new CoreGraphics.CGRect(x: 0, y: 0, width: 65, height: 65));
            var keyframe3 = NSValue.FromCGRect(new CoreGraphics.CGRect(x: 0, y: 0, width: 5200, height: 5200));


            animation.Values = new NSObject[] {
                keyframe1,
                keyframe2,
                keyframe3
            };


            animation.KeyTimes = new NSNumber[]{
                NSNumber.FromFloat(0f),
                NSNumber.FromFloat(0.7f),
                NSNumber.FromFloat(1f)
            };

            /*
                contentView.layer.mask?.add(animation, forKey: "bounds")
                contentView.layer.mask?.bounds = CGRect(x: 0, y: 0, width: 2600, height: 2600)
            */

            ContenidoVista.Layer.Mask.AddAnimation(animation, "bounds");
            ContenidoVista.Layer.Mask.Bounds = new CoreGraphics.CGRect(x: 0, y: 0, width: 5200, height: 5200);

            // contentView.transform = CGAffineTransform(scaleX: 1.1, y: 1.1)

            ContenidoVista.Transform = CoreGraphics.CGAffineTransform.MakeScale(1.1f, 1.1f); //Scale(1.1f, sy: 1.1f);

            /* UIView.animate(withDuration: 0.4, delay: 0.8, usingSpringWithDamping: 1, initialSpringVelocity: 16, options: .curveEaseInOut, animations: {
                 self.contentView.transform = CGAffineTransform(scaleX: 1, y: 1)
             }, completion: nil)
             */

            UIView.Animate(0.4, 0.8, UIViewAnimationOptions.CurveEaseInOut, HandleAction, HandleAction1);


        }

        void HandleAction()
        {
            //self.contentView.transform = CGAffineTransform(scaleX: 1, y: 1)
            ContenidoVista.Transform = CoreGraphics.CGAffineTransform.MakeScale(1, 1);

        }

        void HandleAction1()
        {
            UIView statusBar = UIApplication.SharedApplication.ValueForKey(new NSString("statusBar")) as UIView;
            if (statusBar.RespondsToSelector(new ObjCRuntime.Selector("setBackgroundColor:")))
            {
                statusBar.BackgroundColor = UIColor.White;
            }
        }

	}
}
